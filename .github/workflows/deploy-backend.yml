name: Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'sa-east-1' }}
  ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build JAR
        run: ./gradlew clean shadowJar -x test

      - name: Build and push Docker image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building Docker image..."
          docker build -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG} .
          docker tag ${ECR_REPOSITORY_URI}:${IMAGE_TAG} ${ECR_REPOSITORY_URI}:latest

          echo "Pushing Docker image to ECR..."
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
          docker push ${ECR_REPOSITORY_URI}:latest


  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: prod

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || 22 }}
          script: |
            set -e
            echo "üöÄ Iniciando despliegue Cadetex Backend"

            # Asegurar Docker activo
            sudo systemctl start docker || true

            # Verificar docker rootless / sudo
            DOCKER_CMD="docker"
            if ! docker info >/dev/null 2>&1; then DOCKER_CMD="sudo docker"; fi

            # Login a ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | $DOCKER_CMD login --username AWS --password-stdin ${{ env.ECR_REPOSITORY_URI }}

            # Crear estructura de deploy
            sudo mkdir -p /opt/cadetex-backend/{config,logs}
            cd /opt/cadetex-backend

            # Crear docker-compose de producci√≥n
            cat <<EOF | sudo tee docker-compose.prod.yml > /dev/null
            services:
              backend:
                image: \${ECR_IMAGE}
                container_name: cadetex-backend
                restart: unless-stopped
                ports:
                  - "8080:8080"
                environment:
                  - AWS_REGION=\${AWS_REGION}
                  - S3_BUCKET_NAME=\${S3_BUCKET_NAME}
                volumes:
                  - /opt/cadetex-backend/config:/app/config:ro
                  - /opt/cadetex-backend/logs:/app/logs
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
            EOF

            # Crear archivo .env
            cat <<EOF | sudo tee .env > /dev/null
            ECR_IMAGE=${{ env.ECR_REPOSITORY_URI }}:${{ github.sha }}
            AWS_REGION=${{ env.AWS_REGION }}
            S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}
            EOF

            # Obtener variables DB (Secrets Manager o fallback)
            export RDS_ENDPOINT="${{ vars.RDS_ENDPOINT }}"
            export DB_NAME="${{ vars.DB_NAME || 'kdt' }}"
            export DB_USER="${{ vars.DB_USER || 'postgres' }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD || '' }}"
            export DB_SECRET_ID="${{ vars.DB_SECRET_ID || '' }}"

            echo "üîç Detectando credenciales..."
            echo "  - Endpoint len: ${#RDS_ENDPOINT}"
            echo "  - DB user len: ${#DB_USER}"

            if [ -n "$DB_SECRET_ID" ]; then
              echo "Obteniendo secretos desde Secrets Manager..."
              if ! command -v jq >/dev/null 2>&1; then
                sudo apt-get update -y && sudo apt-get install -y jq
              fi
              SECRET_JSON=$(aws secretsmanager get-secret-value \
                --region "${AWS_REGION}" \
                --secret-id "${DB_SECRET_ID}" \
                --query SecretString --output text || true)

              if [ -n "$SECRET_JSON" ] && [ "$SECRET_JSON" != "None" ]; then
                RDS_ENDPOINT=${RDS_ENDPOINT:-$(echo "$SECRET_JSON" | jq -r .host)}
                DB_USER=${DB_USER:-$(echo "$SECRET_JSON" | jq -r .username)}
                DB_PASSWORD=${DB_PASSWORD:-$(echo "$SECRET_JSON" | jq -r .password)}
                DB_NAME=${DB_NAME:-$(echo "$SECRET_JSON" | jq -r .dbname)}
              fi
            fi

            # Generar application.conf
            echo "üìù Escribiendo application.conf"
            sudo -E bash -c 'cat > /opt/cadetex-backend/config/application.conf <<CONF
            ktor {
              development = false
              deployment { port = 8080 }
              application { modules = [ com.cadetex.ApplicationKt.module ] }
            }

            database {
              host = "${RDS_ENDPOINT}"
              port = 5432
              name = "${DB_NAME}"
              user = "${DB_USER}"
              password = "${DB_PASSWORD}"
              maxPoolSize = 10
            }
            CONF'

            sudo head -n 20 /opt/cadetex-backend/config/application.conf || true

            # Reiniciar contenedor limpio
            echo "üßπ Reiniciando contenedor..."
            $DOCKER_CMD compose -f docker-compose.prod.yml down -v --remove-orphans || true
            $DOCKER_CMD compose -f docker-compose.prod.yml pull
            $DOCKER_CMD compose -f docker-compose.prod.yml up -d

            echo "‚åõ Esperando healthcheck..."
            sleep 10
            $DOCKER_CMD compose -f docker-compose.prod.yml ps
            echo "‚úÖ Deploy completado correctamente."
