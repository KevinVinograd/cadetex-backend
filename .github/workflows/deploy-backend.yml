name: Deploy Backend

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: sa-east-1

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REPOSITORY_URI: ${{ vars.ECR_REPOSITORY_URI }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Current directory: $(pwd)"
          echo "Checking for Dockerfile..."
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile encontrado en la raíz"
          else
            echo "❌ Dockerfile no encontrado. Buscando..."
            find . -name "Dockerfile" -type f
            exit 1
          fi
          
          echo "Building Docker image..."
          docker build -t ${ECR_REPOSITORY_URI}:${IMAGE_TAG} .
          docker tag ${ECR_REPOSITORY_URI}:${IMAGE_TAG} ${ECR_REPOSITORY_URI}:latest
          
          echo "Pushing Docker image to ECR..."
          docker push ${ECR_REPOSITORY_URI}:${IMAGE_TAG}
          docker push ${ECR_REPOSITORY_URI}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    environment: prod
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ vars.SSH_PORT || 22 }}
          script: |
            set -e
            
            # Asegurar Docker activo
            sudo systemctl start docker || true
            
            # Variables docker
            DOCKER_CMD="docker"
            if ! docker info >/dev/null 2>&1; then DOCKER_CMD="sudo docker"; fi
            
            # Login a ECR
            aws ecr get-login-password --region ${{ vars.AWS_REGION || 'sa-east-1' }} | $DOCKER_CMD login --username AWS --password-stdin ${{ vars.ECR_REPOSITORY_URI }}
            
            # Crear docker-compose de producción
            sudo bash -c 'printf "version: '\''3.9'\''\nservices:\n  backend:\n    image: \${ECR_IMAGE}\n    container_name: cadetex-backend\n    restart: unless-stopped\n    ports:\n      - \"8080:8080\"\n    environment:\n      - AWS_REGION=\${AWS_REGION}\n      - S3_BUCKET_NAME=\${S3_BUCKET_NAME}\n    volumes:\n      - /opt/cadetex-backend/config:/app/config:ro\n      - /opt/cadetex-backend/logs:/app/logs\n" > /opt/cadetex-backend/docker-compose.prod.yml'
            
            # Crear .env para docker compose
            echo "ECR_IMAGE=${{ vars.ECR_REPOSITORY_URI }}:${{ github.sha }}" | sudo tee /opt/cadetex-backend/.env > /dev/null
            echo "AWS_REGION=${{ vars.AWS_REGION || 'sa-east-1' }}" | sudo tee -a /opt/cadetex-backend/.env > /dev/null
            echo "S3_BUCKET_NAME=${{ vars.S3_BUCKET_NAME }}" | sudo tee -a /opt/cadetex-backend/.env > /dev/null
            
            cd /opt/cadetex-backend
            $DOCKER_CMD compose -f docker-compose.prod.yml pull
            $DOCKER_CMD compose -f docker-compose.prod.yml up -d
            
            echo "Esperando 5 segundos para que el contenedor inicie..."
            sleep 5
            $DOCKER_CMD compose -f docker-compose.prod.yml ps
            $DOCKER_CMD logs --tail 50 cadetex-backend || true
