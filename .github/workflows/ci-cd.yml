name: Backend CI/CD

on:
  push:
    branches: [master, main]
    paths:
      - '**/*.kt'
      - 'build.gradle.kts'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [master, main]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: cadetex_user
          POSTGRES_PASSWORD: cadetex_password
          POSTGRES_DB: cadetex
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Make gradlew executable
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: cadetex
          DATABASE_USER: cadetex_user
          DATABASE_PASSWORD: cadetex_password

      - name: Build JAR
        run: ./gradlew shadowJar

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: build/libs/cadetex-backend-v2-all.jar

  deploy:
    name: Deploy to EC2
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1  # Brasil (SÃ£o Paulo)

      - name: Build JAR for deployment
        run: ./gradlew clean shadowJar

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SSH_KEY: /tmp/ec2_key.pem
          EC2_USER: ec2-user
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > /tmp/ec2_key.pem
          chmod 400 /tmp/ec2_key.pem
          chmod +x deploy.sh
          
          # Crear application.conf
          cat > application.conf <<EOF
          ktor {
              development = false
              deployment {
                  port = 8080
              }
              application {
                  modules = [ com.cadetex.ApplicationKt.module ]
              }
          }

          database {
              host = "${{ secrets.RDS_ENDPOINT }}"
              port = 5432
              name = "cadetex"
              user = "${{ secrets.DB_USERNAME }}"
              password = "${{ secrets.DB_PASSWORD }}"
              maxPoolSize = 10
          }
          EOF
          
          # Usar el script de deploy existente
          scp -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no \
            build/libs/cadetex-backend-v2-all.jar ec2-user@${EC2_HOST}:/opt/cadetex-backend/
          
          scp -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no \
            application.conf ec2-user@${EC2_HOST}:/opt/cadetex-backend/
          
          ssh -i /tmp/ec2_key.pem -o StrictHostKeyChecking=no ec2-user@${EC2_HOST} << 'ENDSSH'
            sudo systemctl restart cadetex-backend
            sleep 2
            sudo systemctl status cadetex-backend --no-pager
          ENDSSH
          
          rm /tmp/ec2_key.pem

      - name: Health check
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 10
          curl -f http://${EC2_HOST}:8080/swagger || exit 1

